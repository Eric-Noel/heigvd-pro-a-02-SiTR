/*
 * Filename : Simulation.java
 * Creation date : 07.04.2019
 */

package ch.heigvd.sitr.model;

import ch.heigvd.sitr.gui.simulation.Displayer;
import ch.heigvd.sitr.gui.simulation.SimulationWindow;
import ch.heigvd.sitr.map.RoadNetwork;
import ch.heigvd.sitr.map.input.OpenDriveHandler;
import ch.heigvd.sitr.vehicle.Vehicle;
import ch.heigvd.sitr.vehicle.VehicleController;

import java.io.File;
import java.util.*;

/**
 * Simulation class handles all global simulation settings and values
 * The main simulation loop runs here as well
 *
 * @author Luc Wachter, Simon Walther
 */
public class Simulation {
    // The displayable component we need to repaint
    private Displayer window;
    // The scenario of the current simulation
    private ScenarioType scenario;
    // The behaviour the vehicles should have when arriving at their destination
    private VehicleBehaviourType behaviour;
    // List of vehicles generated by traffic generator
    private LinkedList<Vehicle> vehicles;

    // Rate at which the redrawing will happen in milliseconds
    private static final int UPDATE_RATE = 40;

    // Road network
    private final RoadNetwork roadNetwork;

    /**
     * Simulation constructor
     *
     * @param scenario    The scenario the simulation must create
     * @param behaviour   The behaviour the vehicles must adopt when arriving at their destination
     * @param controllers The number of vehicles for each controller type
     */
    public Simulation(ScenarioType scenario, VehicleBehaviourType behaviour,
                      HashMap<VehicleControllerType, Integer> controllers) {
        this.scenario = scenario;
        this.behaviour = behaviour;

        // Generate vehicles from user parameters
        vehicles = generateTraffic(controllers);

        // Create a roadNetwork instance and then parse the OpenDRIVE XML file
        roadNetwork = new RoadNetwork();
        // TODO : Remove hard coded openDriveFilename
        parseOpenDriveXml(roadNetwork, "src/main/resources/map/simulation/simple_road.xodr");
    }

    /**
     * Main simulation loop, runs in a fixed rate timer loop
     */
    public void loop() {
        // Launch main window
        window = SimulationWindow.getInstance();

        // Schedule a task to run immediately, and then
        // every UPDATE_RATE per second
        new Timer().scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                for (Vehicle vehicle : vehicles) {
                    vehicle.update(0.25);
                    vehicle.draw(scenario.getScale());
                    // DEBUG
                    System.out.println(vehicle);
                }

                // TODO (tum) WTF we shouldn't do that
                // Print the road network
                roadNetwork.draw(scenario.getScale());

                // Callback to paintComponent()
                window.repaint();
            }
        }, 0, UPDATE_RATE);
    }

    /**
     * Generate correct number of vehicle for each specified controller
     *
     * @param controllers The hash map containing the specified number of vehicles for each controller
     * @return a list of all vehicles in the simulation
     */
    private LinkedList<Vehicle> generateTraffic(HashMap<VehicleControllerType, Integer> controllers) {
        LinkedList<Vehicle> vehicles = new LinkedList<>();

        // TODO Manage positions and front vehicles

        // Hard coded, to test
        Vehicle wall = new Vehicle("regular.xml", new VehicleController(VehicleControllerType.AUTONOMOUS));
        wall.setPosition(100);

        // Iterate through the hash map
        for (Map.Entry<VehicleControllerType, Integer> entry : controllers.entrySet()) {
            // One controller for all vehicles of a given type
            VehicleController controller = new VehicleController(entry.getKey());

            // Generate as many vehicles as asked
            for (int i = 0; i < entry.getValue(); i++) {
                Vehicle v = new Vehicle("regular.xml", controller);
                v.setFrontVehicle(wall);
                vehicles.add(v);
            }
        }

        return vehicles;
    }

    /**
     * Parse the OpenDrive XML file
     *
     * @param roadNetwork       The Road network that will contains OpenDrive road network
     * @param openDriveFilename The OpenDrive filename
     */
    public void parseOpenDriveXml(RoadNetwork roadNetwork, String openDriveFilename) {
        // TODO (TUM) Add some logs here
        File openDriveFile = new File(openDriveFilename);
        OpenDriveHandler.loadRoadNetwork(roadNetwork, openDriveFile);
    }
}
